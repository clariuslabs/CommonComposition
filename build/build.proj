<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Build"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <Import Project="..\CommonComposition.tasks"/>

    <PropertyGroup>
        <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
        <PackageVersion Condition="'$(PackageVersion)' == ''">1.0.0</PackageVersion>

        <SolutionDir Condition="'$(SolutionDir)' == '' Or '$(SolutionDir)' == '*Undefined*'">$(MSBuildThisFileDirectory)..\</SolutionDir>
        <SolutionDir Condition="!HasTrailingSlash('$(SolutionDir)')">$(SolutionDir)\</SolutionDir>
        <NuGetDir>$(SolutionDir).nuget\</NuGetDir>
        <NuGetExe>$(NuGetDir)NuGet.exe</NuGetExe>

        <DropsDir>..\drops\</DropsDir>
        <SourcesDir>$(MSBuildThisFileDirectory)</SourcesDir>
        <PackagesDir>$(SourcesDir)packages\</PackagesDir>
    </PropertyGroup>

    <PropertyGroup>
        <IncludedItemNames>Compile;Content;EmbeddedResource</IncludedItemNames>
    </PropertyGroup>

    <ItemGroup>
        <PackageSource Include="$(SolutionDir)CommonComposition\CommonComposition.nuspec">
            <Id>CommonComposition</Id>
            <Project>$(SolutionDir)CommonComposition\CommonComposition.csproj</Project>
        </PackageSource>
        <PackageSource Include="$(SolutionDir)CommonComposition.Autofac\CommonComposition.Autofac.nuspec">
            <Id>CommonComposition.Autofac</Id>
            <Project>$(SolutionDir)CommonComposition.Autofac\CommonComposition.Autofac.csproj</Project>
        </PackageSource>
        <PackageSource Include="$(SolutionDir)CommonComposition.Mef\CommonComposition.Mef.nuspec">
            <Id>CommonComposition.Mef</Id>
            <Project>$(SolutionDir)CommonComposition.Mef\CommonComposition.Mef.csproj</Project>
        </PackageSource>
        <PackageSource Include="$(SolutionDir)CommonComposition.Microsoft\CommonComposition.Mef.nuspec">
            <Id>CommonComposition.Mef</Id>
            <Project>$(SolutionDir)CommonComposition.Microsoft\CommonComposition.Microsoft.csproj</Project>
        </PackageSource>
        <PackageSource Include="$(SolutionDir)CommonComposition.Ninject\CommonComposition.Ninject.nuspec">
            <Id>CommonComposition.Ninject</Id>
            <Project>$(SolutionDir)CommonComposition.Ninject\CommonComposition.Ninject.csproj</Project>
        </PackageSource>
        <PackageSource Include="$(SolutionDir)CommonComposition.Unity\CommonComposition.Unity.nuspec">
            <Id>CommonComposition.Unity</Id>
            <Project>$(SolutionDir)CommonComposition.Unity\CommonComposition.Unity.csproj</Project>
        </PackageSource>
        <PackageSource Include="$(SolutionDir)CommonComposition.Windsor\CommonComposition.Windsor.nuspec">
            <Id>CommonComposition.Windsor</Id>
            <Project>$(SolutionDir)CommonComposition.Windsor\CommonComposition.Windsor.csproj</Project>
        </PackageSource>
    </ItemGroup>

    <ItemGroup>
        <Solutions Include="..\CommonComposition.sln"/>
    </ItemGroup>

    <Target Name="Build" DependsOnTargets="RestorePackages;Clean;BuildBinary;BuildSource;Drop" />

    <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

    <Target Name="BuildBinary">
        <MSBuild Projects="@(Solutions)"
                 Properties="Configuration=$(Configuration);PackageVersion=$(PackageVersion)"
                 Targets="Rebuild"
                 />
    </Target>

    <Target Name="BuildSource" Inputs="@(PackageSource)" Outputs="%(Identity)-runalways" >
        <ReadProject ProjectFile="%(PackageSource.Project)" IncludedItemNames="$(IncludedItemNames)">
            <Output TaskParameter="RootNamespace" PropertyName="RootNamespace" />
            <Output TaskParameter="FrameworkName" PropertyName="FrameworkName" />
            <Output TaskParameter="Content" ItemName="Content" />
        </ReadProject>
        <PropertyGroup>
            <PackageId>%(PackageSource.Id)</PackageId>
            <PackageDir>$(PackagesDir)$(PackageId)\</PackageDir>
            <PackageContentDir>$(PackageDir)content\$(FrameworkName)\External\$(PackageId)\</PackageContentDir>
            <PackageSpec>$(PackageDir)%(PackageSource.Filename)%(PackageSource.Extension)</PackageSpec>
        </PropertyGroup>

        <ItemGroup>
            <!-- Append destination location metadata to all content -->
            <Content Condition="'%(Content.Identity)' != ''">
                <Destination>@(Content -> '$(PackageContentDir)%(RelativePath)%(Filename)%(Extension)')</Destination>
            </Content>
            <!-- Make .Resources.Designer aware of the target project assembly name. -->
            <Content Condition="'%(Content.Filename)' == 'Resources.Designer'">
                <Destination>@(Content -> '$(PackageContentDir)%(RelativePath)%(Filename)%(Extension).pp')</Destination>
            </Content>
            <!-- Include original package source, where we'll append .Source and "(Source)" -->
            <Content Include="@(PackageSource)">
                <Destination>$(PackageSpec)</Destination>
            </Content>
        </ItemGroup>

        <Copy SourceFiles="@(Content)"
              DestinationFiles="@(Content -> '%(Destination)')"
              Condition="!$([System.Text.RegularExpressions.Regex]::IsMatch('%(Content.Filename)', 'AssemblyInfo')) And !$([System.Text.RegularExpressions.Regex]::IsMatch('%(Content.Filename)', 'GlobalSuppressions'))"
              ContinueOnError="false"
              SkipUnchangedFiles="true"
              OverwriteReadOnlyFiles="true" />

        <!-- Make .Resources.Designer aware of the target project assembly name. -->
        <ReplaceContents Condition="'%(Content.Filename)' == 'Resources.Designer'"
                         FileName="%(Content.Destination)"
                         Match='ResourceManager("$(RootNamespace)'
                         Replace='ResourceManager("$AssemblyName$.External.$(PackageId)' />

        <ItemGroup>
            <_VersionRegexTransform Include="$(PackageSpec)">
                <Find><![CDATA[<id>(.*?)</id>]]></Find>
                <ReplaceWith><![CDATA[<id>$1.Source</id>]]></ReplaceWith>
                <Options>Singleline</Options>
            </_VersionRegexTransform>
            <_VersionRegexTransform Include="$(PackageSpec)">
                <Find><![CDATA[<title>(.*?)</title>]]></Find>
                <ReplaceWith><![CDATA[<title>$1 (Source)</title>]]></ReplaceWith>
                <Options>Singleline</Options>
            </_VersionRegexTransform>
        </ItemGroup>

        <RegexTransform Items="@(_VersionRegexTransform)" />

        <Exec Command="&quot;$(NuGetExe)&quot; pack -NoPackageAnalysis &quot;$(PackageSpec)&quot; -OutputDirectory &quot;$(PackagesDir.TrimEnd('\'))&quot; -Version &quot;$(PackageVersion)&quot;" />

    </Target>

    <Target Name="Clean">
        <ItemGroup>
            <AllFiles Include="..\**\bin\*.nupkg" />
            <AllDirs Include="@(AllFiles -> '%(RootDir)%(Directory)')" />
            <AllBin Include="@(AllDirs -> Distinct())" />
            <Bin Include="@(AllBin -> TrimEnd('\'))" />
        </ItemGroup>

        <Exec Command="rmdir &quot;$(DropsDir.TrimEnd('\'))&quot; /S /Q" Condition="Exists('$(DropsDir)')" />
        <Exec Command="rmdir &quot;$(PackagesDir.TrimEnd('\'))&quot; /S /Q" Condition="Exists('$(PackagesDir)')" />
        <Exec Command="rmdir &quot;@(Bin)&quot; /S /Q" Condition="'%(Bin.Directory)' != ''"/>
    </Target>

    <Target Name="Drop">
        <ItemGroup>
            <Package Include="..\**\*.nupkg" Exclude="..\packages\**\*.nupkg" />
        </ItemGroup>

        <Move SourceFiles="@(Package)"
              DestinationFiles="@(Package -> '$(DropsDir)%(Filename)%(Extension)')" />
    </Target>

    <Target Name="RestorePackages" DependsOnTargets="_DownloadNuGet">
        <Exec Command="&quot;$(NuGetExe)&quot; restore &quot;%(Solutions.FullPath)&quot; -NonInteractive"/>
    </Target>

    <Target Name="_DownloadNuGet" Condition="!Exists('$(NuGetExe)')">
        <MakeDir Directories="$(NuGetDir)" Condition="!Exists('$(NuGetDir)')"/>
        <DownloadNuGet OutputFilename="$(NuGetExe)" />
    </Target>

</Project>