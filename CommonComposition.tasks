<Project ToolsVersion="4.0"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!--
    ============================================================
				ReplaceContents

    Performs simple string replacement in a file contents.
    
    Example:

        <ReplaceContents FileName="$(PackageSpec)"
                         Match='$PackageVersion$'
                         Replace='$(PackageVersion)' />
    
    ============================================================
    -->
    <UsingTask TaskName="ReplaceContents" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <FileName ParameterType="System.String" Required="true" />
            <Match ParameterType="System.String" Required="true" />
            <Replace ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
File.WriteAllText(this.FileName, File.ReadAllText(this.FileName).Replace(this.Match, this.Replace));                
]]>
            </Code>
        </Task>
    </UsingTask>

    <!--
    ============================================================
				RegexTransform

    Transforms the input Items parameter by evaluating the 
    regular expression in their Find metadata and 
    replacing with their ReplaceWith metadata. Optional, the 
    options for the regular expression evaluation can be specified.
    
    Example input item:
            <RegexTransform Include="$(BuildRoot)Src\GlobalAssemblyInfo.cs">
                <Find>AssemblyFileVersion\(".*?"\)</Find>
                <ReplaceWith>AssemblyFileVersion("$(FileVersion)")</ReplaceWith>
                <Options>Multiline | IgnorePatternWhitespace</Options>
            </RegexTransform>
    
    Invoking the target:
        <RegexTransform Items="@(RegexTransform)" />   
    ============================================================
    -->
    <UsingTask TaskName="RegexTransform"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Code Type="Fragment"
                  Language="cs">
                <![CDATA[
           foreach(var item in Items)
           {
             string fileName = item.GetMetadata("FullPath");
             string find = item.GetMetadata("Find");
             string replaceWith = item.GetMetadata("ReplaceWith");
             string optionsValue = item.GetMetadata("Options") ?? "";
             
             var options = string.IsNullOrWhiteSpace(optionsValue) ? 
                RegexOptions.None : (RegexOptions)Enum.Parse(typeof(RegexOptions), optionsValue.Replace('|', ','));

             if(!File.Exists(fileName))
             {
               Log.LogError("Could not find file: {0}", fileName);
               return false;
             }
             string content = File.ReadAllText(fileName);
             File.WriteAllText(
               fileName,
               Regex.Replace(
                 content,
                 find,
                 replaceWith, 
                 options
               )
             );
           }
         ]]>
            </Code>
        </Task>
    </UsingTask>

    <!--
    ============================================================
				ReadAssemblyVersion

    Reads the given File input parameter, which should contain 
    an [AssemblyVersion] attribute, and parses the version 
    components into the following output parameters:
        * Major
        * Minor
        * Revision
        * Build
    ============================================================
    -->
    <UsingTask TaskName="ReadAssemblyVersion"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <File Required="true" />
            <Major Output="true" ParameterType="System.Int32" />
            <Minor Output="true" ParameterType="System.Int32" />
            <Revision Output="true" ParameterType="System.Int32" />
            <Build Output="true" ParameterType="System.Int32" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.Text.RegularExpressions"/>
            <Code Type="Fragment"
                  Language="cs">
                <![CDATA[
if (!System.IO.File.Exists(this.File))
{
    Log.LogError(null, null, null, null, 0, 0, 0, 0, String.Format("Could not find file: {0}", this.File), new object[0]);
    return false;
}

var contents = System.IO.File.ReadAllText(this.File);
var reg = new Regex(@"AssemblyVersion\(""(?<major>\d+)\.(?<minor>\d+)(\.(?<build>\d+))?(\.(?<revision>\d+))?""\)");

var match = reg.Match(contents);

this.Major = int.Parse(match.Groups["major"].Value);
this.Minor = int.Parse(match.Groups["minor"].Value);
if (match.Groups["build"].Success)
    this.Build = int.Parse(match.Groups["build"].Value);
if (match.Groups["revision"].Success)
    this.Revision = int.Parse(match.Groups["revision"].Value);
]]>
            </Code>
        </Task>
    </UsingTask>

</Project>